{"version":3,"sources":["../src/node/index.ts","../src/browser/vitePlugin.ts","../src/index.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/ban-ts-comment */\r\nimport { randomUUID } from 'node:crypto';\r\nimport { HttpHandler, handleRequest } from 'msw';\r\nimport { Emitter } from 'strict-event-emitter';\r\nimport { Headers } from 'headers-polyfill';\r\nimport { encodeBuffer } from '@mswjs/interceptors';\r\nimport type { IncomingHttpHeaders } from 'node:http';\r\nimport type { Connect } from 'vite';\r\n\r\nconst emitter = new Emitter();\r\n\r\nasync function transformReadableStramToUint8Array(stream: ReadableStream): Promise<Uint8Array> {\r\n  const reader = stream.getReader();\r\n  const chunks: Uint8Array[] = [];\r\n\r\n  // eslint-disable-next-line no-constant-condition\r\n  while (true) {\r\n    const { done, value } = await reader.read();\r\n    if (done) break;\r\n    chunks.push(new Uint8Array(value));\r\n  }\r\n\r\n  let totalLength = 0;\r\n  for (let i = 0; i < chunks.length; i++) {\r\n    totalLength += chunks[i].length;\r\n  }\r\n\r\n  const result = new Uint8Array(totalLength);\r\n\r\n  let offset = 0;\r\n  for (let i = 0; i < chunks.length; i++) {\r\n    result.set(chunks[i], offset);\r\n    offset += chunks[i].length;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nconst sanitizeHeaders = (headers: IncomingHttpHeaders) =>\r\n  Object.entries({ ...headers }).reduce((acc, [key, value]) => {\r\n    if (typeof key === 'string' && !key.startsWith(':')) {\r\n      // @ts-ignore\r\n      acc[key] = value;\r\n    }\r\n    return acc;\r\n  }, {});\r\n\r\nexport const createNodeMiddleware =\r\n  (serverOrigin = `http://localhost`) =>\r\n  (...handlers: HttpHandler[]): Connect.NextHandleFunction => {\r\n    return async (req, res, next) => {\r\n      if (!req.method || !req.url) {\r\n        next();\r\n      } else {\r\n        let requestBody;\r\n        if (!['GET', 'HEAD'].includes(req.method)) {\r\n          requestBody = encodeBuffer(\r\n            // @ts-ignore\r\n            typeof req.body === 'string' ? req.body : JSON.stringify(req.body),\r\n          );\r\n        }\r\n\r\n        // Treat all relative URLs as the ones coming from the server.\r\n        const mockedRequest = new Request(new URL(req.url, serverOrigin), {\r\n          method: req.method,\r\n          headers: new Headers(sanitizeHeaders(req.headers)),\r\n          credentials: 'omit',\r\n          body: requestBody,\r\n        });\r\n\r\n        await handleRequest(\r\n          mockedRequest,\r\n          randomUUID(),\r\n          handlers,\r\n          {\r\n            onUnhandledRequest: () => null,\r\n          },\r\n          // @ts-ignore\r\n          emitter,\r\n          {\r\n            resolutionContext: {\r\n              /**\r\n               * @note Resolve relative request handler URLs against\r\n               * the server's origin (no relative URLs in Node.js).\r\n               */\r\n              baseUrl: serverOrigin,\r\n            },\r\n            async onMockedResponse(mockedResponse) {\r\n              const { status, statusText, headers, body } = mockedResponse;\r\n              res.statusCode = status;\r\n              headers.forEach((value, name) => {\r\n                res.setHeader(name, value);\r\n              });\r\n\r\n              // ReadableStream to Uint8Array\r\n              let returnBody;\r\n              if (body) returnBody = await transformReadableStramToUint8Array(body);\r\n              res.end(returnBody ? returnBody : statusText);\r\n            },\r\n            onPassthroughResponse() {\r\n              next();\r\n            },\r\n          },\r\n        );\r\n      }\r\n    };\r\n  };\r\n","import { readFile, copyFile } from 'node:fs/promises';\r\nimport { dirname, resolve } from 'node:path';\r\nimport { fileURLToPath } from 'node:url';\r\nimport type { Connect } from 'vite';\r\n\r\nconst __dirname = dirname(fileURLToPath(import.meta.url));\r\nconst swFileName = 'mockServiceWorker.js';\r\nconst localMswDistPath = resolve(__dirname, swFileName);\r\n\r\nexport const createBrowserMiddleware = (): Connect.NextHandleFunction => {\r\n  return async (req, res, next) => {\r\n    try {\r\n      if (req.method !== 'GET' || !req.url?.includes(`/${swFileName}`)) {\r\n        next();\r\n        return;\r\n      }\r\n\r\n      const swContent = await readFile(localMswDistPath, 'utf8');\r\n      res.setHeader('content-type', 'application/javascript');\r\n      res.statusCode = 200;\r\n      res.end(swContent);\r\n    } catch (error) {\r\n      console.error(error);\r\n      res.statusCode = 500;\r\n      res.end(error.toString());\r\n    }\r\n  };\r\n};\r\n\r\ninterface BuildBrowserSupportOptions {\r\n  outDir: string;\r\n}\r\n\r\nexport const buildMswForBrowser = async ({ outDir }: BuildBrowserSupportOptions) => {\r\n  const outputPath = resolve(process.cwd(), outDir, swFileName);\r\n  await copyFile(localMswDistPath, outputPath);\r\n};\r\n","import { createNodeMiddleware } from './node/';\r\nimport { buildMswForBrowser, createBrowserMiddleware } from './browser/vitePlugin';\r\nimport type { HttpHandler } from 'msw';\r\nimport type { PluginOption } from 'vite';\r\n\r\nexport interface VitePluginMswOptions {\r\n  mode?: 'browser' | 'node';\r\n  handlers?: HttpHandler[];\r\n  build?: boolean;\r\n}\r\n\r\ninterface BrowserIntegrationOptions {\r\n  build?: boolean;\r\n}\r\n\r\nconst browserIntegration = ({ build }: BrowserIntegrationOptions): PluginOption => {\r\n  let outDir;\r\n  return {\r\n    name: 'vite-plugin-msw:browser-integration',\r\n    configureServer(devServer) {\r\n      const { isProduction } = devServer.config;\r\n      if (!isProduction) {\r\n        devServer.middlewares.use(createBrowserMiddleware());\r\n      }\r\n    },\r\n    configResolved(config) {\r\n      outDir = config.build.outDir;\r\n    },\r\n    async closeBundle() {\r\n      const isProduction = process.env.NODE_ENV === 'production';\r\n      if (isProduction && build) {\r\n        await buildMswForBrowser({ outDir });\r\n      }\r\n    },\r\n  };\r\n};\r\n\r\nconst getNodeIntegration = (handlers: HttpHandler[]): PluginOption => {\r\n  return {\r\n    name: 'vite-plugin-msw:node-integration',\r\n    configureServer(devServer) {\r\n      devServer.middlewares.use(createNodeMiddleware()(...handlers));\r\n    },\r\n  };\r\n};\r\n\r\nfunction vitePluginMsw(\r\n  options: Omit<VitePluginMswOptions, 'handlers'> & { mode?: 'browser' },\r\n): PluginOption;\r\nfunction vitePluginMsw(options: VitePluginMswOptions): PluginOption {\r\n  const { mode = 'browser', handlers = [], build = false } = options;\r\n  if (mode === 'node') {\r\n    return getNodeIntegration(handlers);\r\n  } else {\r\n    return browserIntegration({ build });\r\n  }\r\n}\r\n\r\nexport default vitePluginMsw;\r\n"],"mappings":"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","names":[]}